mod lexer;
mod parser;
mod runtime;

use lexer::lexer_core::Lexer;
use parser::parser_core::Parser;
use runtime::environment::Environment;
use runtime::runtime_core::Evaluator;

fn main() {
    let source = "(3 + 42) * 7.5".to_string();
    
    // Lexical analysis
    let mut lexer = Lexer::new(source);
    let tokens = lexer.scan_tokens();

    // Display tokens generated by the lexer
    println!("Tokens:");
    for token in &tokens {
        println!("{:?}", token);
    }

    // Parsing
    let mut parser = Parser::new(tokens);
    let ast = match parser.parse() {
        Ok(expr) => expr,
        Err(e) => {
            eprintln!("Failed to parse: {:?}", e);
            return;
        }
    };

    // Display the Abstract Syntax Tree (AST)
    println!("\nAbstract Syntax Tree (AST):");
    println!("{:?}", ast);

    // Setup environment and evaluator
    let environment = Environment::new();
    let mut evaluator = Evaluator::new(environment);

    // Evaluation
    match evaluator.evaluate(&ast) {
        Ok(result) => println!("\nResult: {:?}", result),
        Err(e) => eprintln!("Failed to evaluate: {:?}", e),
    }
}
